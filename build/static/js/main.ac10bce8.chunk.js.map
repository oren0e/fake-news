{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","useState","text","setText","isSubmitting","setIsSubmitting","analyzeResult","setAnalyzeResult","Box","maxW","mx","padding","Text","fontSize","as","mt","mb","Textarea","value","onChange","e","target","placeholder","height","Button","variantColor","variant","isLoading","loadingText","onClick","axios","post","then","response","console","log","data","result","catch","error","disabled","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","ThemeProvider","CSSReset","document","getElementById","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"qQA2EeA,MAtEf,WAAgB,IAAD,EACWC,mBAAS,IADpB,mBACNC,EADM,KACAC,EADA,OAE2BF,oBAAS,GAFpC,mBAENG,EAFM,KAEQC,EAFR,OAG6BJ,mBAAS,MAHtC,mBAGNK,EAHM,KAGSC,EAHT,KA8Bb,OACE,kBAACC,EAAA,EAAD,CAAKC,KAAK,QAAQC,GAAG,OAAOC,QAAQ,QAClC,kBAACC,EAAA,EAAD,CAAMC,SAAS,MAAMC,GAAG,MAAxB,wBAIA,kBAACF,EAAA,EAAD,CAAMC,SAAS,KAAKC,GAAG,KAAvB,mDAIA,kBAACN,EAAA,EAAD,CAAKO,GAAG,OAAOC,GAAG,QAChB,kBAACC,EAAA,EAAD,CACEC,MAAOhB,EACPiB,SAtCiB,SAACC,GACxBjB,EAAQiB,EAAEC,OAAOH,OACjBX,EAAiB,OAqCXe,YAAY,gCACZN,GAAG,OACHO,OAAO,UAET,kBAACC,EAAA,EAAD,CACEC,aAAa,OACbC,QAAQ,QACRC,UAAWvB,EACXwB,YAAY,eACZC,QA3Cc,WACpBxB,GAAgB,GAGhByB,IACGC,KAAK,WAAY,CAChB7B,SAED8B,MAAK,SAAUC,GACdC,QAAQC,IAAIF,GAEZ1B,EAAiB0B,EAASG,KAAKC,QAC/BhC,GAAgB,MAEjBiC,OAAM,SAAUC,GACfL,QAAQC,IAAII,GACZlC,GAAgB,OA4BdmC,SAA0B,IAAhBtC,EAAKuC,QANjB,iBAWgB,MAAjBnC,GACC,kBAACE,EAAA,EAAD,KACE,kBAACI,EAAA,EAAD,CAAMC,SAAS,KAAKC,GAAG,KAAvB,2CAC0C,gCAAyB,IAAhBR,EAAT,KAD1C,aCtDUoC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAACC,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,MACA,kBAAC,EAAD,QAGJC,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBxB,MAAK,SAAAyB,GACJA,EAAaC,gBAEdpB,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAMoB,c","file":"static/js/main.ac10bce8.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport axios from 'axios';\n\nimport { Textarea, Text, Button, Box } from '@chakra-ui/core';\n\nfunction App() {\n  const [text, setText] = useState('');\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [analyzeResult, setAnalyzeResult] = useState(null);\n\n  const handleTextChange = (e) => {\n    setText(e.target.value);\n    setAnalyzeResult(null);\n  };\n\n  const handleOnClick = () => {\n    setIsSubmitting(true);\n\n    // TODO: add the correct endpoint.\n    axios\n      .post('/predict', {\n        text,\n      })\n      .then(function (response) {\n        console.log(response);\n        // assumes that response is a number between 0.0-1.0\n        setAnalyzeResult(response.data.result);\n        setIsSubmitting(false);\n      })\n      .catch(function (error) {\n        console.log(error);\n        setIsSubmitting(false);\n      });\n  };\n\n  return (\n    <Box maxW=\"960px\" mx=\"auto\" padding=\"15px\">\n      <Text fontSize=\"5xl\" as=\"h1\">\n        Fake News Classifier\n      </Text>\n\n      <Text fontSize=\"xl\" as=\"p\">\n        Paste a news story to see how likely it is fake\n      </Text>\n\n      <Box mt=\"30px\" mb=\"30px\">\n        <Textarea\n          value={text}\n          onChange={handleTextChange}\n          placeholder=\"Type or paste your text here.\"\n          mb=\"25px\"\n          height=\"300px\"\n        />\n        <Button\n          variantColor=\"teal\"\n          variant=\"solid\"\n          isLoading={isSubmitting}\n          loadingText=\"Analyzing...\"\n          onClick={handleOnClick}\n          disabled={text.length === 0}\n        >\n          Analyze text\n        </Button>\n      </Box>\n      {analyzeResult != null && (\n        <Box>\n          <Text fontSize=\"lg\" as=\"p\">\n            The model thinks that the above text is <strong>{analyzeResult * 100}%</strong> fake.\n          </Text>\n        </Box>\n      )}\n    </Box>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ThemeProvider, CSSReset } from '@chakra-ui/core';\n\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <ThemeProvider>\n      <CSSReset />\n      <App />\n    </ThemeProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}